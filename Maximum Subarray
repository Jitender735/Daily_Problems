class Solution{
public:
	vector<int> findSubarray(int a[], int n) {
	    // code here
	    
	    int maxSum=0;
	    int maxStart=0;
	    int maxEnd=0;
	    int currSum=0;
	    int currStart=0;
	    
	    for(int i=0;i<n;i++)
	    {
	        if(a[i]<0) {currSum=0;
	        
	            currStart=i+1;
	        }
	        
	        else{
	            currSum+=a[i];
	        }
	        
	        if(currSum>maxSum){
	            maxSum=currSum;
	            maxStart=currStart;
	            maxEnd=i+1;
	        }
	        else if(currSum==maxSum)
	        {
	            int currDis=i+1-currStart;
	            int maxDis=maxEnd-maxStart;
	            
	            if(currDis>maxDis)
	            {
	                maxStart=currStart;
	                maxEnd=i+1;
	               
	            }
	        }
	    }
	    
	    vector<int> v;
	    
	    if(maxEnd==0)
	    {
	        v.push_back(-1);
	    }
	    else
	    {
	        for(int j=maxStart;j<maxEnd;j++)
	    {
	        v.push_back(a[j]);
	    }
	    }
	    
	    return v;
	}
};

//IT IS MODIFIED VERSION OF KADANE'S ALGORITHM WHERE IF ARR[I]<0 THEN CURRSUM=0  AND MAIN POINT TO REMEMBER WE MAKE A SUBARRAY BY MAKING  A VECTOR 
